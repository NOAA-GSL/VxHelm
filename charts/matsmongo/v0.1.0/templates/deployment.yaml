apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    deployment.kubernetes.io/revision: "1"
  labels:
    cattle.io/creator: norman
    workload.user.cattle.io/workloadselector: deployment-{{ .Release.Namespace }}-mongo
  name: mongo
  namespace: {{ .Release.Namespace }}
spec:
  progressDeadlineSeconds: 600
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      workload.user.cattle.io/workloadselector: deployment-{{ .Release.Namespace }}-mongo
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
    type: RollingUpdate
  template:
    metadata:
      annotations:
        field.cattle.io/ports: '[[{"containerPort":27017,"dnsName":"mongo-nodeport","kind":"NodePort","name":"mongoport","protocol":"TCP"}]]'
      labels:
        workload.user.cattle.io/workloadselector: deployment-{{ .Release.Namespace }}-mongo
    spec:
      containers:
        - image: {{ .Values.image.repository }}:{{ .Values.image.tag }}
          imagePullPolicy: Always
          name: matsmongo
          ports:
            - containerPort: 27017
              name: mongoport
              protocol: TCP
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities: {}
            privileged: false
            readOnlyRootFilesystem: false
            runAsNonRoot: false
          stdin: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          tty: true
          volumeMounts:
            - mountPath: /data/db
              name: data
              subPath: {{ .Values.persistentVolumeClaim }}/dev/mongodata
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
      volumes:
        - name: data
          persistentVolumeClaim:
            claimName: {{ .Values.persistentVolumeClaim }}
